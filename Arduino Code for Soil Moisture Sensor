#include <LiquidCrystal.h>

const int LCD_RS = 12;
const int LCD_EN = 11;
const int LCD_D4 = 5;
const int LCD_D5 = 4;
const int LCD_D6 = 3;
const int LCD_D7 = 2;
const int MOISTURE_POWER_PIN = A0;
const int MOISTURE_SIGNAL_PIN = A1;
const int MOTOR_IN1 = 9;
const int MOTOR_IN2 = 7;
const int MOTOR_ENA = 8;
const int LCD_CONTRAST_PIN = 6;
const int LCD_CONTRAST = 75;

const int MAX_VALID_READING = 600;
const int LOW_SPEED = 100;
const int MEDIUM_SPEED = 170;
const int HIGH_SPEED = 255;

LiquidCrystal lcd(LCD_RS, LCD_EN, LCD_D4, LCD_D5, LCD_D6, LCD_D7);

void setup() {
  lcd.begin(16, 2);
  analogWrite(LCD_CONTRAST_PIN, LCD_CONTRAST);

  pinMode(MOISTURE_POWER_PIN, OUTPUT);  
  pinMode(MOISTURE_SIGNAL_PIN, INPUT);  
  pinMode(MOTOR_IN1, OUTPUT);
  pinMode(MOTOR_IN2, OUTPUT);
  pinMode(MOTOR_ENA, OUTPUT);

  Serial.begin(9600);  
}

void loop() {
  lcd.setCursor(0, 0);
  lcd.print("Moisture Level:");
  
  int moistureLevel = readMoistureLevel();

  if (moistureLevel <= MAX_VALID_READING) {
    displayMoistureLevel(moistureLevel);
    controlMotor(moistureLevel);
  } else {
    displayError();
    stopMotor();
  }

  delay(1000);
}

int readMoistureLevel() {
  digitalWrite(MOISTURE_POWER_PIN, HIGH);
  delay(10);  
  int level = analogRead(MOISTURE_SIGNAL_PIN);
  digitalWrite(MOISTURE_POWER_PIN, LOW);
  return level;
}

void displayMoistureLevel(int level) {
  lcd.setCursor(0, 1);
  lcd.print("                ");
  lcd.setCursor(0, 1);
  lcd.print(level);

  Serial.print("Moisture Level: ");
  Serial.println(level); 
}

void displayError() {
  lcd.setCursor(0, 1);
  lcd.print("NIL            ");  
  Serial.println("Sensor Error: NIL (Reading above 600 or disconnected)");
}

void controlMotor(int moistureLevel) {
  int speed = 0;

  if (moistureLevel < 100) {
    speed = 0;
    digitalWrite(MOTOR_IN1, LOW);
    digitalWrite(MOTOR_IN2, LOW);
  } else if (moistureLevel <= 300) {
    speed = LOW_SPEED;
  } else if (moistureLevel <= 500) {
    speed = MEDIUM_SPEED;
  } else {
    speed = HIGH_SPEED;
  }

  digitalWrite(MOTOR_IN1, HIGH);
  digitalWrite(MOTOR_IN2, LOW);
  analogWrite(MOTOR_ENA, speed);  
}

void stopMotor() {
  digitalWrite(MOTOR_IN1, LOW);
  digitalWrite(MOTOR_IN2, LOW);
  analogWrite(MOTOR_ENA, 0); 
}
